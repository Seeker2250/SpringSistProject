package org.sist.sistproject.faq;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.aspectj.weaver.patterns.TypePatternQuestions.Question;
import org.sist.sistproject.exception.DataNotFoundException;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Join;
import jakarta.persistence.criteria.JoinType;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import lombok.RequiredArgsConstructor;
@Service
@RequiredArgsConstructor
@Transactional
public class FaqServiceImpl implements FaqService{

	private final FaqRepository faqRepository;
	
	
	//게시글 등록
	@Override
	public void register(String title, String content) {
		Faq faq = new Faq();
		faq.setTitle(title);
		faq.setContent(content);
		faq.setCreateDate(LocalDateTime.now());
		
		this.faqRepository.save(faq);
		
	}

	//페이징 된 목록 가져와
	/*
	@Override
	public Page<Faq> getList(int page) {
		List<Sort.Order> sorts = new ArrayList<>();
		sorts.add(Sort.Order.desc("id"));//정렬기준이 여러 개일 때가 있기 때문에 굳이 List로 만든 것
		
		Pageable pageable = PageRequest.of(page, 10, Sort.by(sorts));
		//현재 페이지 받아와서 10개씩 뿌려 direction이랑 property라는 parameter도 있으니 공부할 것
		return this.faqRepository.findAll(pageable); // 1번 페이지 끝
	}*/
	
	//상세보기
	@Override
	public Faq getFaq(Long id) {
		Optional<Faq> faq = this.faqRepository.findById(id);
        if(faq.isPresent()) {
        	this.faqRepository.updateViewCount(id);
            return faq.get();
        } else {
            throw new DataNotFoundException("@@@@@@faq가 업서요~!");
        }
	}
	
	//게시글 수정
	@Override
	public void modifyFaq(Faq faq, String title, String content) {
		faq.setTitle(title);
		faq.setContent(content);
		faq.setModifyDate(LocalDateTime.now());
		this.faqRepository.save(faq);
	}
	
	//게시글 삭제
	@Override
	public void delete(Faq faq) {
		this.faqRepository.delete(faq);
	}

	//싹 다 지워
	 public void deleteMultiple(List<Long> ids) {
	        faqRepository.deleteAllById(ids);
	    }
	 
	 //페이징 + 검색 된 목록 가져와
	 private Specification<Faq> search(String kw) {//매개변수로 검색어
			
	        return new Specification<>() {//interface를 annonymous class로 객체 생성해서 return, 이 interface의 toPredicate가 abstract method로 있어
	            private static final long serialVersionUID = 1L;
	            @Override
	            public Predicate toPredicate(Root<Question> q, CriteriaQuery<?> query, CriteriaBuilder cb) {//generic에 의해 만들어져
	            	//JPA 안의 function으로 JPQL 만들어!
	            	//Root<Question>이므로 from Question과 같아 기준이 되는 entity
	                query.distinct(true);  // 중복을 제거 
	                Join<Question, SiteUser> u1 = q.join("author", JoinType.LEFT);//question과 SiteUser가 Left Outer Join, SiteUser alias를 u1로 준 셈
	                Join<Question, Answer> a = q.join("answerList", JoinType.LEFT);
	                Join<Answer, SiteUser> u2 = a.join("author", JoinType.LEFT);
	                return cb.or(//이거 or 말고 if문으로 분기 나눠도 될 듯? 근데 그럴 바에 QueryDSL로 동적으로 처리하는 게 좋을 듯 공부하자
	                		cb.like(q.get("subject"), "%" + kw + "%"), // 제목 QueryDSL에선 BooleanBuilder에 담지만 지금은 CriteriaBuilder에 담아 
	                        cb.like(q.get("content"), "%" + kw + "%"),      // 내용  검색 조건, 검색어가 Spring Legacy에서도 Criteria에 담겨졌었지
	                        cb.like(u1.get("username"), "%" + kw + "%"), // 질문 작성자 
	                        cb.like(a.get("content"), "%" + kw + "%"),      // 답변 내용 
	                        cb.like(u2.get("username"), "%" + kw + "%")  // 답변 작성자
	                        );    //이게 내부적으로는 Repository에 있는 JPQL로 만들어져서 날아가는거야
	            }
	        };

}
